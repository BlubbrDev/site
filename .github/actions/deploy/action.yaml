# Notice:
# This action has been depreciated. We now use vercel to automate our deployment. Contact @Justin 
# for more information about this if you have any questions.
name: 'Deploys a React App to GitHub pages'
description: 'This action will automate the process of deploying a react app to github pages.'

runs: 
  using: 'composite'
  steps:

    # Configure the commit signature to come from github-actions at github-actions@github.com
    - name: Configuring git username and email...
      run: |
        git config user.name 'github-actions[bot]'
        git config user.email 'github-actions[bot]@users.noreply.github.com'
      shell: bash

    # Bump the minor version of the react app and create a new tag
    - name : Bumping minor version...
      run : npm version minor
      shell: bash

    # Add all changes from the work-tree
    - name : Adding changes from the working tree...
      run : git --work-tree build add --all
      shell: bash

    # Commit all changes (see grep details below)
    - name : Committing changes...
      run : git commit -m "ðŸ¥³ Automatically deploying v$(npm version | grep 'site' | grep -E -o "[0-9]+\.[0-9]+\.[0-9]+[^']*")"
      shell: bash

    # Push the changes to the gh-pages branch
    - name : Pushing changes to gh-pages branch...
      run : git push origin HEAD:gh-pages --force
      shell: bash

# About the grep (see more at https://semver.org/)
  # The grep has three parts which are piped into eachother with the vertical bar character. The
  # first part gets a list of all the packages and their versions and returns it in JSON format. The
  # second part finds the lines which contain the string 'site' (there should be only one). This 
  # produces a line such as {site: '0.4.0',} (minus the braces). The third part will match just the
  # version via another grep (-E for extended mode and -o to print only the match) which will
  # try to match any valid semantic versioning version id. Valid versions are of the form
  # MAJOR.MINOR.PATCH-pre.RELEASE+meta where the uppercase words represent non-negative integers, 
  # the pre is the pre-release identifier such as beta or alpha, and the meta tag is used
  # to describe the build. For example, 1.2.3-beta.4-justin-blob. The major, minor, and patch are
  # required and everything else is optional.